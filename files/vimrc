set nocompatible

try
    filetype off        " required to use Vundle
    "set shell=/bin/bash\ -li " https://github.com/gmarik/vundle/issues/175
    "set shellcmdflag=-ic       " use an interactive login shell for $PATH
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " let Vundle manage Vundle (required!)
    Bundle 'gmarik/vundle'

    " GitHub repos
    Bundle 'nanotech/jellybeans.vim'
    "Bundle 'riobard/vim-cute-python'
    Bundle 'sickill/vim-monokai'
    Bundle 'tpope/vim-vividchalk'
    Bundle 'Lokaltog/vim-powerline'
    Bundle 'Townk/vim-autoclose'
    Bundle 'adimit/prolog.vim'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'godlygeek/tabular'
    Bundle 'jpalardy/vim-slime'
    Bundle 'kchmck/vim-coffee-script'
    Bundle 'kien/ctrlp.vim'
    Bundle 'majutsushi/tagbar'
    Bundle 'mileszs/ack.vim'
    Bundle 'msanders/snipmate.vim'
    Bundle 'nelstrom/vim-markdown-folding'
    Bundle 'nelstrom/vim-mac-classic-theme'
    Bundle 'riobard/scala.vim'
    Bundle 'scrooloose/nerdtree'
    Bundle 'scrooloose/syntastic'
    "Bundle 'spolu/dwm.vim'
    Bundle 'tomasr/molokai'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-haml'
    Bundle 'tpope/vim-markdown'
    Bundle 'tpope/vim-repeat'
    Bundle 'uarun/vim-protobuf'
    Bundle 'ap/vim-css-color'
    "Bundle 'jacekd/vim-iawriter'
    "Bundle 'laktek/distraction-free-writing-vim'
    Bundle 'kien/rainbow_parentheses.vim'
    Bundle 'rking/ag.vim'
    Bundle 'jnwhiteh/vim-golang'
    Bundle 'honza/dockerfile.vim'

    " Vim-scripts repos
    Bundle 'surround.vim'
    Bundle 'matchit.zip'
    Bundle 'nginx.vim'
    Bundle 'cocoa.vim'
    Bundle 'applescript.vim'
    Bundle 'httplog'
    Bundle 'DrawIt'
    Bundle 'vim-json-bundle'
catch /E117:/
    " Vundle is not available
endtry

filetype plugin indent on   " required by Vundle

" Powerline options seem to only work in .vimrc. Binding too late has no
" effect. Fancy symbols require patched font to render properly.  Both
" `unicode` and `fancy` options introduce a start delay on OS X, possibly due
" to font fallback mechanism.  See issue #163:
" https://github.com/Lokaltog/vim-powerline/issues/163
"let g:Powerline_symbols = 'unicode'
"let g:Powerline_symbols = 'fancy'
"let g:Powerline_symbols = 'compatible'
" FIXME symbol override does not work with default theme/colorscheme, but use
" other theme/colorscheme introduces a long startup delay
let g:Powerline_symbols_override = { 'BRANCH': '⑂', 'LINE': '' }
"let g:Powerline_theme = 'default'
let g:Powerline_colorscheme = 'solarized16'



""" Indentation
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab shiftround
set autoindent


""" autoclose 
"let g:AutoCloseProtectedRegions = []
"let g:AutoCloseProtectedRegions = ["Comment", "String", "Character"]


""" commandline editing
" Emacs keybinding for command line mode editing
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>

""" Window management
" Shortcuts to resize windows
map - <C-W>+
map _ <C-W>-
map + <C-W><
map = <C-W>>

" Shortcuts to move windows
"map <S-j> <C-w>J
"map <S-k> <C-w>K
"map <S-h> <C-w>H
"map <S-l> <C-w>L


""" Shortcuts to move around

" Move by screen line
"
" Normal node
map <Up>    gk
map <Down>  gj

" Insert mode
imap <Up>   <C-o>gk
imap <Down> <C-o>gj

" Visual mode
vmap <D-j> gj
vmap <D-k> gk
" head of line
vmap <D-0> g0
" beginning of line
vmap <D-6> g^
" end of line
vmap <D-4> g$

" Normal mode
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g0

" Switch between split panels
" Note: we use Option key as prefix. iTerm 2 sends Option key as +Esc. Meta 
" doesn't work properly. 
map <Esc>j <C-w>j
map <Esc>k <C-w>k
map <Esc>h <C-w>h
map <Esc>l <C-w>l


" intuitive backspacing in insert mode
" allow backspacing over everything in insert mode
set backspace=indent,eol,start


" The leader character is your own personal modifier key, as g is Vim’s
" modifier key (when compared to vi). The default leader is \, but this is not
" located standardly on all keyboards and requires a pinky stretch in any
" case.  <SPACE> is also a good choice. Note: you can of course have several “
" personal modifier keys” simply by mapping a sequence, but the leader key is
" handled more formally. 
let mapleader = " "

" speed up command typing by saving the shift to type ':'
nnoremap ; :

" Remap ` to '.  These are very similar keys. Typing 'a will jump to the line
" in the current file marked with ma. However, `a will jump to the line and
" column marked with ma. It is more useful in any case I can imagine, but it
" is located way off in the corner of the keyboard. The best way to handle
" this is just to swap them:
nnoremap ' `
nnoremap ` '


" Switch tabs in Normal mode
" Note: Terminal cannot recongnize <C-Tab>, just <Tab>
map <Tab>   :tabnext<CR>
map <S-Tab> :tabprev<CR>


map <leader>t :NERDTree\|TagbarToggle<CR>
com TT NERDTree | TagbarToggle


"  use w!! to 'sudo' save after you opened the file without 'sudo' first
cmap w!! w !sudo tee % >/dev/null


" Toggle `set list` to show invisible chars
nmap <leader>l :set list!<CR>

" Toggle paste mode
nmap <leader>p :set paste!<CR>


" clear search highlights easily
"nmap <silent> <leader>/ :let @/=""<CR>
nmap <leader>/ :nohl<CR>


""" Syntax highlighting
syntax enable   " enable syntax highlighting

set t_Co=256    " Use 256 colors to display correctly in console
"set background=dark " better to use COLORFGBG env var to auto set

"" Solarized color scheme and my tweaks
silent! colo solarized
try
    if g:colors_name == 'solarized'
        if &background == 'dark'
            hi Normal ctermfg=7     " brighter color for the main text
            hi NonText ctermbg=0    " same background as ColorColumn
        else
            hi Normal ctermfg=0     " darker color for the main text
            hi NonText ctermbg=7    " same background as ColorColumn
        endif
    endif
catch /E121:/   " g:colors_name does not exist i.e. no colorscheme is set
endtry

"" light colorschemes
"silent! colo tangolight
"silent! colo tutticolori
"silent! colo donbass

"" dark colorschemes
"silent! colo vividchalk
"silent! colo oceandeep
"silent! colo blackboard2
"silent! colo Monokai
"silent! colo molokai


" Highlight text columns 81-400 to mark the 80 columns boundary. 
"let &colorcolumn=join(range(81,400),",")

" ctermbg=232 is black, and 233 is slightly lighter than black.
"hi ColorColumn ctermbg=233
"hi NonText ctermbg=233


""" Completion
" By default, pressing <TAB> in command mode will choose the first possible
" completion with no indication of how many others there might be. The
" following configuration lets you see what your other options are:
set wildmenu

" To have the completion behave similarly to a shell, i.e. complete only up to
" the point of ambiguity (while still showing you what your options are), also
" add the following:
set wildmode=full

" ignore some file extensions when completing names by pressing Tab
set wildignore=*.swp,*.bak,*.pyc,*.pyo,*.class


""" search
set incsearch   " incremental search (search as you type)
set hlsearch    " highlight search result

" Use case-smart searching. These two options, when set together, will make
" /-style searches case-sensitive only if there is a capital letter in the
" search expression. *-style searches continue to be consistently
" case-sensitive.
set ignorecase smartcase


""" folding
set foldlevelstart=0
" toggle current fold
nnoremap <space> za
vnoremap <space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO



""" formatting paragraphs

" Use Q to format selected region in visual mode
vmap Q gq
" and format a whole paragraph under the cursor in normal mode
nmap Q gqap

" m: break lines at multibyte chars (for asian chars)
" M: do not insert a space before/after multibyte char when joining
" n format numbered list
set fo+=mMn


""" status line
" Enable limited line numbering
" It’s often useful to know where you are in a buffer, but full line 
" numbering is distracting. Setting the option below is a good compromise:
"set ruler
" Now in the bottom right corner of the status line there will be something 
" like: 529, 35 68%, representing line 529, column 35, about 68% of the way to
" the end. 

set laststatus=2    " always show the status line
"set statusline=%{fugitive#statusline()}\ %<%F\ %y%h%m%r%=%-14.(%l,%c%V%)\ [%P/%L]

" Use these symbols for invisible chars
set listchars=tab:⇥\ ,trail:␣,eol:↩,nbsp:␣,extends:…,precedes:…

" Set the terminal title.  A running gvim will always have a window title, but
" when vim is run within an xterm, by default it inherits the terminal’s
" current title.  This gives e.g. | page.html (~) - VIM |. 
set title titlestring=%<%F

" Silent mode. No beeping. 
set visualbell noerrorbells

" Read 5 lines as modelines
set modeline modelines=5

" Hightlight cursor position
"set cursorline  "cursorcolumn



set fileencoding=utf8 fileencodings=utf8,gb2312,big5
set fileformat=unix fileformats=unix,dos,mac


set showmatch     " set show matching parenthesis

" Turn on hidden.  Don’t worry about the name. What this does is allow Vim to
" manage multiple buffers effectively.  
" * The current buffer can be put to the background without writing to disk; 
" * When a background buffer becomes current again, marks and undo-history 
" are remembered.
set hidden


" Keep a longer history By default, Vim only remembers the last 20 commands
" and search patterns entered. It’s nice to boost this up:
set history=1000
set undolevels=1000      " use many levels of undo


" Maintain more context around the cursor.  When the cursor is moved outside
" the viewport of the current window, the buffer is scrolled by a single line.
" Setting the option below will start the scrolling three lines before the
" border, keeping more context around where you’re working.
set scrolloff=3
" Typing zz is also handy; it centers the window on the cursor without moving
" the cursor. (But watch out for ZZ!) 



set number
if exists("+relativenumber")
    set relativenumber
endif



" Stifle many interruptive prompts: The “Press ENTER or type command to
" continue” prompt is jarring and usually unnecessary. You can shorten
" command-line text and other info tokens with, e.g.:
set shortmess=atI
" See :help shortmess for the breakdown of what this changes. You can also
" pare things down further if you like. 



" Trigger tag auto hightlight every second. Note this is done by writing swap
" file to trigger the CursorHold event. Low values will incur more disk I/O.
set updatetime=1000 


" show softwarpped continuing line
set showbreak=…


if exists("+autochdir")
    " change working directory to the one containing the file opened
    set autochdir
endif


""" tohtml mode
" use CSS stylesheet and XHTML for TOhtml
let html_use_css = 1
let use_xhtml = 1


""" Tabularize plugin
if exists(":Tabularize")
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>

    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>

    nmap <Leader>a/ :Tabularize /\/\/<CR>
    vmap <Leader>a/ :Tabularize /\/\/<CR>

    nmap <Leader>a# :Tabularize /#<CR>
    vmap <Leader>a# :Tabularize /#<CR>

    "Alternative style: spaces after colons
    "nmap <Leader>a: :Tabularize /:\zs<CR>
    "vmap <Leader>a: :Tabularize /:\zs<CR>
endif


""" Syntastic plugin
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--max-line-length=120'


""" slime plugin
let g:slime_target = "tmux"


""" NERDTree plugin

" hide some file extensions
let NERDTreeIgnore=['\.pyc', '\.pyo']



""" Rainbow plugin https://github.com/kien/rainbow_parentheses.vim
function s:load_rainbow_parentheses()
    if exists(':RainbowParenthesesToggle')
        au Syntax * RainbowParenthesesLoadRound
        au Syntax * RainbowParenthesesLoadSquare
        au Syntax * RainbowParenthesesLoadBraces
        RainbowParenthesesToggle
    endif
endfunction

au VimEnter * :call s:load_rainbow_parentheses()


""" GUI
if has("gui_running")
    set guioptions-=T       " no toolbar
    set go-=r               " no right scrollbar
    set go-=l               " no left scrollbar
    set go-=b               " no bottom scrollbar
    set go-=L               " no scrollbar even if split
    set go-=R               " no scrollbar even if split

    " Make MacVim looks cool
    if has("gui_macvim")
        "set guifont=Monaco:h12
        "set guifont=Menlo\ for\ Powerline:h12
        set guifont=Source\ Code\ Pro\ for\ Powerline:h12

        " Enable meta- kind binding for GUI
        set macmeta
        map <M-j> <C-w>j
        map <M-k> <C-w>k
        map <M-h> <C-w>h
        map <M-l> <C-w>l

        " transparent background
        if &background == 'dark'
            "hi normal guibg=black
            "set transparency=5
        endif
    endif
endif
